name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Install MongoDB
      run: |
        sudo apt-get update
        sudo apt-get install -y gnupg
        wget -qO- https://www.mongodb.org/static/pgp/server/7.0.asc | sudo tee /etc/apt/trusted.gpg.d/server-7.0.asc
        echo "deb [ arch=amd64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh

    - name: Wait for MongoDB to be ready
      run: |
        for i in {1..30}; do
          if mongosh --host localhost --port 27017 --eval "db.runCommand({ping: 1})"; then
            echo "MongoDB is ready"
            exit 0
          fi
          echo "Waiting for MongoDB..."
          sleep 2
        done
        echo "MongoDB did not start in time"
        exit 1

    - name: Insert test user into MongoDB
      run: |
        mongosh --host localhost --port 27017 <<EOF
        use test_db;
        db.users.insertOne({ email: "samuel@gmail.com", password: "samuel" });
        EOF

    - name: Tests
      run: npm test
      env:
        MONGO_URI: mongodb://localhost:27017/test_db
